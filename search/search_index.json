{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Arun's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Arun Somasundaram</li> <li>Reviewer: Nathan Jacobs</li> </ul> <p>If you want to set up a development container in the programming language Rust, you have come to the right place to learn! Before we start, here are a couple of prerequisites you must have before we dive right in! Much of the content before setting up the development environment cites the Mkdocs tutorial from Comp 423. </p>"},{"location":"tutorials/rust-setup/#part-0-prerequisites","title":"Part 0: Prerequisites","text":"<ul> <li>Install Visual Studio Code<ul> <li>Install the Dev Containers extension for VS Code (Extensions &gt; Type Dev Containers in the search bar and click the first option &gt; Hit Install)</li> </ul> </li> <li>Install Git</li> <li>Install Docker</li> <li>Have a GitHub account</li> </ul>"},{"location":"tutorials/rust-setup/#part-1-initialization","title":"Part 1: Initialization","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-new-directory-and-initialize-git","title":"Step 1: Create a New Directory and Initialize Git","text":"<p>(A) Open your terminal or command prompt.</p> <p>(B) Create a new directory for your project. <pre><code>mkdir rust-dev-container\n</code></pre> (C) Go into this directory. <pre><code>cd rust-dev-container\n</code></pre> (D) Initialize a new Git repository. <pre><code>git init\n</code></pre> (E) Create a README file: <pre><code>echo \"# Rust Dev Container\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2: Create a Remote Repository on GitHub","text":"<p>(A) Log into GitHub and click the green \"New\" button next to \"Top Repositories\"</p> <p>(B) You only need to fill in these details, do not do anything else:</p> <ul> <li>Repository Name: rust-dev-container</li> <li>Description: \"Setting up a rust-dev-container\"</li> <li>Visibility: Public</li> </ul> <p>(D) Click Create Repository.</p>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-to-github","title":"Step 3. Link your Local Repository to GitHub","text":"<p>(A) Add the GitHub repository by typing this in the same terminal you opened earlier: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-dev-container.git\n</code></pre> (B) Replace  with your GitHub username. <p>(C) Check your default branch name with the subcommand git branch. If it's not main, rename it to main with the following command: git branch -M main.</p> <p>(D) Push your local commits to the GitHub repository: <pre><code>git push --set-upstream origin main\n</code></pre></p>"},{"location":"tutorials/rust-setup/#part-2-setting-up-the-development-environment","title":"Part 2: Setting Up the Development Environment","text":"<p>Now that we have GitHub all set up, it is time to actually set up the development environment.</p>"},{"location":"tutorials/rust-setup/#step-1-make-the-dev-container-directory","title":"Step 1: Make the dev container directory","text":"<ul> <li>Open VS Code</li> <li>Click File &gt; Open &gt; rust-dev-container</li> <li>Open your terminal and type: <pre><code>mkdir .devcontainer\n</code></pre> This creates the directory in your project</li> </ul>"},{"location":"tutorials/rust-setup/#step-2-set-up-the-json-file","title":"Step 2: Set up the JSON file","text":"<p>To make the dev container json file, type the following in the terminal: <pre><code>cd .devcontainer\ntouch devcontainer.json\n</code></pre></p> <p>Now we have this file inside the right directory.</p> <p>Copy and paste this into .devcontainer.json: <pre><code>{\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"rust-lang.rust-analyzer\"\n            ]\n        }\n    }\n}\n</code></pre></p>"},{"location":"tutorials/rust-setup/#step-3-inside-the-dev-container","title":"Step 3: Inside the Dev Container","text":"<p>Now to run Rust in the our Docker environment, click Command + Shift + P</p> <p>Then, type in Dev Container: Reopen in Dev Container, and select this option</p> <p>After loading for a moment, you will now be inside a Rust project. To make sure you are using rust, type and enter:</p> <p><pre><code>rustc --version\n</code></pre> If the following output is rustc followed by a float, you are good to go!</p>"},{"location":"tutorials/rust-setup/#part-3-hello-world","title":"Part 3: Hello World","text":""},{"location":"tutorials/rust-setup/#step-1-create-and-navigate-to-a-new-file-for-our-rust-program","title":"Step 1: Create and navigate to a new file for our Rust program","text":"<pre><code>cargo new hello-comp423 --vcs none\ncd hello-comp423\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-go-to-explorer-hello-comp423-src-mainrs","title":"Step 2: Go to Explorer &gt; hello-comp423 &gt; src &gt; main.rs","text":"<p>The contents of the file should be:</p> <pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#step-3-modify-the-inside-of-the-println-parentheses-to-say-hello-comp423","title":"Step 3: Modify the inside of the println! parentheses to say \"Hello COMP423\"","text":"<pre><code>fn main() {\n    println!(\"Hello COMP423\");\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#step-4-type-and-enter-this-inside-your-vs-code-terminal","title":"Step 4: Type and enter this inside your VS Code terminal:","text":"<p><pre><code>cargo build\n</code></pre> Now, we have compiled our code, but we have not run it yet.</p>"},{"location":"tutorials/rust-setup/#step-5-to-run-our-code-we-can-type-and-enter","title":"Step 5: To run our code, we can type and enter:","text":"<pre><code>./target/debug/hello-comp423\n</code></pre> <p>You should now see \"Hello COMP423\" printed in your terminal!</p> <p>Cargo Run</p> <p>We can actually do both of the previous steps in one step by running:</p> <pre><code>cargo run\n</code></pre> <p>This step compiles our file, and runs it to see the same output in the terminal!</p>"},{"location":"tutorials/rust-setup/#step-6-pushing-the-completed-project-to-github","title":"Step 6: Pushing the completed project to github","text":"<p>Run the following code in the terminal to update your github repo:</p> <pre><code>git add .\ngit commit -m \"Completed the hello-comp423 program.\"\ngit push -u origin main\n</code></pre>"},{"location":"tutorials/rust-setup/#summary","title":"Summary","text":"<p>In this project, we:</p> <ul> <li>Initialized a repository and linked it to github</li> <li>Set up a development environment</li> <li>Created a fully functional RUST program</li> </ul> <p>That's it everyone! Congratulations on building your first ever Rust program! </p>"}]}